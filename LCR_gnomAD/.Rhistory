## sanity checks to make sure that the rare sAF common rAF numbers match old method using the average AN for rAF calculation
rare_sAF_common_rAF5 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF5 > rare))
rare_sAF_common_rAF10 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF10 > rare))
rare_sAF_common_rAF15 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF15 > rare))
rare_sAF_common_rAF20 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF20 > rare))
## sanity checks to make sure that the rare sAF and rare rAF numbers match old method using the average AN for rAF calculation
rare_sAF_rare_rAF5 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF5 <= rare ))
are_sAF_common_rAF5
## sanity checks to make sure that the rare sAF common rAF numbers match old method using the average AN for rAF calculation
rare_sAF_common_rAF5 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF5 > rare))
are_sAF_common_rAF5
rare_sAF_common_rAF5
rare_sAF_common_rAF10
rare_sAF_common_rAF15
rare_sAF_common_rAF20
## sanity checks to make sure that the rare sAF and rare rAF numbers match old method using the average AN for rAF calculation
rare_sAF_rare_rAF5 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF5 <= rare ))
rare_sAF_rare_rAF10 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF10 <= rare ))
rare_sAF_rare_rAF15 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF15 <= rare ))
rare_sAF_rare_rAF20 = nrow(indels_median_AN %>% filter(sAF <= rare & rAF20 <= rare ))
rare_sAF_rare_rAF5
rare_sAF_rare_rAF10
rare_sAF_rare_rAF15
rare_sAF_rare_rAF20
###### read in files
## Read in ClinVar file
clinvar = fread(file = '/Users/sandyyang/Desktop/Data/ClinVar_2022_04_03.tsv', sep = '\t', header = FALSE)
colnames(clinvar) = c("CHR", "POS", "REF", "ALT", "V5", "V6", "V7", "V8", "V9", "predictedDeleteriousness", "V11", "V12", "V13", "V14", "V15", "V16" )
clinvar$varID = paste0(clinvar$CHR, sep="-", clinvar$POS, sep="-", clinvar$REF,sep="-",clinvar$ALT)
## Read in IGM file
IGM_indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
IGM_indels$varID = paste0(IGM_indels$CHR, sep="-", IGM_indels$POS, sep="-", IGM_indels$REF,sep="-",IGM_indels$ALT)
## Read in ATAV cols
ATAV_cols = fread(file = "/Users/sandyyang/Desktop/Data/20220912_IGM_varID_genename_omimdisease_gnomadpli_samplename.csv", sep=",",header = TRUE)
colnames(ATAV_cols) = c("varID", "geneName", "OMIM_disease", "gnomAD_pLI", "sampleName")
## Read in oe_lof_upper column
oe_lof_upper_varID = fread(file = "/Users/sandyyang/Desktop/Data/20220916_varID_oe_lof_upper_IGM_no_duplic_with_header.csv", sep = ",", header = TRUE)
colnames(oe_lof_upper_varID) = c("varID", "geneName", "oe_lof_upper")
oe_lof_upper = distinct(oe_lof_upper_varID[, c("geneName", "oe_lof_upper")])
## Read in impact information from ATAV
impact = fread(file = "/Users/sandyyang/Desktop/Data/20220916_varID_impact_IGM_no_duplic_with_header.csv", sep = ",", header = TRUE)
colnames(impact) = c("varID", "impact")
## Read in effect file
effect_gene_name = fread(file="/Users/sandyyang/Desktop/Data/20220916_varID_effect_genename_IGM_no_duplic_no_header.csv", sep = ",", header = TRUE )
colnames(effect_gene_name) = c("varID", "Effect", "geneName")
## get only "constrained indels" or indels on constrained genes
constrained = ATAV_cols %>% filter (gnomAD_pLI > 0.5)
## merge so the dataframe also has the clinvar column
clinvar_constrained = merge(constrained,clinvar, by = "varID")
## get only the pathogenic indels
pathogenic_clinvar_constrained = clinvar_constrained %>% filter(clinvar_constrained$predictedDeleteriousness %in% c('Pathogenic',
'Pathogenic/Likely_pathogenic',
'Pathogenic/Likely_pathogenic|_other', 'Pathogenic|_Affects',
'Pathogenic|_other', 'Pathogenic|_protective',
'Pathogenic|_risk_factor'))
## filter for rare sAF indels
rare_sAF = IGM_indels %>% filter(IGM_indels$sAF <= rare_IGM)
## filter for rare sAF indels
rare_sAF = IGM_indels %>% filter(IGM_indels$sAF <= rare_IGM)
rare_IGM = 10^-4
## filter for rare sAF indels
rare_sAF = IGM_indels %>% filter(IGM_indels$sAF <= rare_IGM)
## Get only the pathogenic constrained indels such that the indels are rare by sAF
pathogenic_clinvar_constrained_rare_sAF = merge(pathogenic_clinvar_constrained, rare_sAF, by = "varID")
## Add in the OMIM and PLI columns to dataframes as well
OMIM_pLI = ATAV_cols %>% select(geneName, OMIM_disease, gnomAD_pLI)
## Remove duplicate entries
OMIM_pLI_no_duplic = distinct(OMIM_pLI)
## merge the dataframe with the OMIM PLI columns
output_5_add_OMIM_pLI = left_join(pathogenic_clinvar_constrained_rare_sAF, OMIM_pLI_no_duplic, by = "geneName", keep=FALSE)
## merge with oe_lof_upper columns
output_5_add_oe_lof_upper = left_join(output_5_add_OMIM_pLI, oe_lof_upper, by="geneName", keep=FALSE)
## merge with Impact column
output_5_add_impact = left_join(output_5_add_oe_lof_upper,impact, by = "varID", keep = FALSE)
## merge with the effect and gene name
output_5_add_effect = left_join(output_5_add_impact, effect_gene_name, by = "varID", keep = FALSE)
## clean up the output
output <-
output_5_add_effect %>% mutate(
varID = varID,
pLI = gnomAD_pLI.x,
Impact = impact,
Effect = Effect,
ClinVar_classification = predictedDeleteriousness,
oe_lof_upper = oe_lof_upper,
gene_name = geneName.x,
AC = AC,
GROUPID_bp5 = GROUPID_bp5,
GROUPID_bp10 = GROUPID_bp10,
GROUPID_bp15 = GROUPID_bp15,
GROUPID_bp20 = GROUPID_bp20,
AC_bp5 = AlleleCount_bp5,
AC_bp10 = AlleleCount_bp10,
AC_bp15 = AlleleCount_bp15,
AC_bp20 = AlleleCount_bp20,
sAF = sAF,
AN = AN,
rAF5 = rAF5,
rAF10 = rAF10,
rAF15 = rAF15,
rAF20 = rAF20,
CHR = CHR.x,
POS = POS.x,
REF = REF.x,
ALT = ALT.x
) %>% select(varID, Impact, Effect, pLI, ClinVar_classification, oe_lof_upper, gene_name, AN, AC, AC_bp5, AC_bp10, AC_bp15, AC_bp20, sAF, rAF5, rAF10, rAF15, rAF20, GROUPID_bp5, GROUPID_bp10, GROUPID_bp15, GROUPID_bp20, CHR, POS, REF, ALT)
## remove duplicates varIDs
output = distinct(output, by="varID" )
## remove duplicates varIDs
output = distinct(output[varID])
## clean up the output
output <-
output_5_add_effect %>% mutate(
varID = varID,
pLI = gnomAD_pLI.x,
Impact = impact,
Effect = Effect,
ClinVar_classification = predictedDeleteriousness,
oe_lof_upper = oe_lof_upper,
gene_name = geneName.x,
AC = AC,
GROUPID_bp5 = GROUPID_bp5,
GROUPID_bp10 = GROUPID_bp10,
GROUPID_bp15 = GROUPID_bp15,
GROUPID_bp20 = GROUPID_bp20,
AC_bp5 = AlleleCount_bp5,
AC_bp10 = AlleleCount_bp10,
AC_bp15 = AlleleCount_bp15,
AC_bp20 = AlleleCount_bp20,
sAF = sAF,
AN = AN,
rAF5 = rAF5,
rAF10 = rAF10,
rAF15 = rAF15,
rAF20 = rAF20,
CHR = CHR.x,
POS = POS.x,
REF = REF.x,
ALT = ALT.x
) %>% select(varID, Impact, Effect, pLI, ClinVar_classification, oe_lof_upper, gene_name, AN, AC, AC_bp5, AC_bp10, AC_bp15, AC_bp20, sAF, rAF5, rAF10, rAF15, rAF20, GROUPID_bp5, GROUPID_bp10, GROUPID_bp15, GROUPID_bp20, CHR, POS, REF, ALT)
## sort the rAF5 column in descending order
output[order(-rAF5),]
## remove duplicates varIDs
output = distinct(output[varID])
## remove duplicates varIDs
output = distinct(output[,varID])
## remove duplicates
output = distinct(output)
rare_IGM = 10^-4
###### read in files
## Read in ClinVar file
clinvar = fread(file = '/Users/sandyyang/Desktop/Data/ClinVar_2022_04_03.tsv', sep = '\t', header = FALSE)
colnames(clinvar) = c("CHR", "POS", "REF", "ALT", "V5", "V6", "V7", "V8", "V9", "predictedDeleteriousness", "V11", "V12", "V13", "V14", "V15", "V16" )
clinvar$varID = paste0(clinvar$CHR, sep="-", clinvar$POS, sep="-", clinvar$REF,sep="-",clinvar$ALT)
## Read in IGM file
IGM_indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
IGM_indels$varID = paste0(IGM_indels$CHR, sep="-", IGM_indels$POS, sep="-", IGM_indels$REF,sep="-",IGM_indels$ALT)
## Read in ATAV cols
ATAV_cols = fread(file = "/Users/sandyyang/Desktop/Data/20220912_IGM_varID_genename_omimdisease_gnomadpli_samplename.csv", sep=",",header = TRUE)
colnames(ATAV_cols) = c("varID", "geneName", "OMIM_disease", "gnomAD_pLI", "sampleName")
## Read in oe_lof_upper column
oe_lof_upper_varID = fread(file = "/Users/sandyyang/Desktop/Data/20220916_varID_oe_lof_upper_IGM_no_duplic_with_header.csv", sep = ",", header = TRUE)
colnames(oe_lof_upper_varID) = c("varID", "geneName", "oe_lof_upper")
oe_lof_upper = distinct(oe_lof_upper_varID[, c("geneName", "oe_lof_upper")])
## Read in impact information from ATAV
impact = fread(file = "/Users/sandyyang/Desktop/Data/20220916_varID_impact_IGM_no_duplic_with_header.csv", sep = ",", header = TRUE)
colnames(impact) = c("varID", "impact")
## Read in effect file
effect_gene_name = fread(file="/Users/sandyyang/Desktop/Data/20220916_varID_effect_genename_IGM_no_duplic_no_header.csv", sep = ",", header = TRUE )
colnames(effect_gene_name) = c("varID", "Effect", "geneName")
## get only "constrained indels" or indels on constrained genes
constrained = ATAV_cols %>% filter (gnomAD_pLI > 0.5)
## merge so the dataframe also has the clinvar column
clinvar_constrained = merge(constrained,clinvar, by = "varID")
## get only the pathogenic indels
pathogenic_clinvar_constrained = clinvar_constrained %>% filter(clinvar_constrained$predictedDeleteriousness %in% c('Pathogenic',
'Pathogenic/Likely_pathogenic',
'Pathogenic/Likely_pathogenic|_other', 'Pathogenic|_Affects',
'Pathogenic|_other', 'Pathogenic|_protective',
'Pathogenic|_risk_factor'))
## filter for rare sAF indels
rare_sAF = IGM_indels %>% filter(IGM_indels$sAF <= rare_IGM)
## Get only the pathogenic constrained indels such that the indels are rare by sAF
pathogenic_clinvar_constrained_rare_sAF = merge(pathogenic_clinvar_constrained, rare_sAF, by = "varID")
## Add in the OMIM and PLI columns to dataframes as well
OMIM_pLI = ATAV_cols %>% select(geneName, OMIM_disease, gnomAD_pLI)
## Remove duplicate entries
OMIM_pLI_no_duplic = distinct(OMIM_pLI)
## merge the dataframe with the OMIM PLI columns
output_5_add_OMIM_pLI = left_join(pathogenic_clinvar_constrained_rare_sAF, OMIM_pLI_no_duplic, by = "geneName", keep=FALSE)
## merge with oe_lof_upper columns
output_5_add_oe_lof_upper = left_join(output_5_add_OMIM_pLI, oe_lof_upper, by="geneName", keep=FALSE)
## merge with Impact column
output_5_add_impact = left_join(output_5_add_oe_lof_upper,impact, by = "varID", keep = FALSE)
## merge with the effect and gene name
output_5_add_effect = left_join(output_5_add_impact, effect_gene_name, by = "varID", keep = FALSE)
## clean up the output
output <-
output_5_add_effect %>% mutate(
varID = varID,
pLI = gnomAD_pLI.x,
Impact = impact,
Effect = Effect,
ClinVar_classification = predictedDeleteriousness,
oe_lof_upper = oe_lof_upper,
gene_name = geneName.x,
AC = AC,
GROUPID_bp5 = GROUPID_bp5,
GROUPID_bp10 = GROUPID_bp10,
GROUPID_bp15 = GROUPID_bp15,
GROUPID_bp20 = GROUPID_bp20,
AC_bp5 = AlleleCount_bp5,
AC_bp10 = AlleleCount_bp10,
AC_bp15 = AlleleCount_bp15,
AC_bp20 = AlleleCount_bp20,
sAF = sAF,
AN = AN,
rAF5 = rAF5,
rAF10 = rAF10,
rAF15 = rAF15,
rAF20 = rAF20,
CHR = CHR.x,
POS = POS.x,
REF = REF.x,
ALT = ALT.x
) %>% select(varID, Impact, Effect, pLI, ClinVar_classification, oe_lof_upper, gene_name, AN, AC, AC_bp5, AC_bp10, AC_bp15, AC_bp20, sAF, rAF5, rAF10, rAF15, rAF20, GROUPID_bp5, GROUPID_bp10, GROUPID_bp15, GROUPID_bp20, CHR, POS, REF, ALT)
## sort the rAF5 column in descending order
output[order(-rAF5),]
## remove duplicates
output = distinct(output)
## write out the tables
write.table(output[order(-rAF5),], "/Users/sandyyang/Desktop/Data/20220929_constrained_pli_gt_0.5_pathogenic_IGM_rare_sAF_high_to_low_rAF5_no_duplic.tsv",  sep="\t", row.names = FALSE, quote = FALSE)
check_duplicated = duplicated(constrained)
check_duplicated = constrained[duplicated(constrained)]
## import packages
library(tidyverse)
library(data.table)
library(readxl)
library(dplyr)
library(stringr)
## Read in files
## sAF, rAF and groupID info for IGM indels
indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
indels$varID = paste0(indels$CHR, sep="-", indels$POS, sep="-", indels$REF,sep="-",indels$ALT)
## Find the REF between POS 2906070 and 2906090 on CHR 11
indels_find_interval = indels %>% filter(indels$CHR == 11) %>% filter(indels$POS >= 2906070 & indels$POS <= 2906090)
## Find the REF between POS 2906070 and 2906090 on CHR 11
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= 2906070 & POS <= 2906090)
View(indels_find_interval)
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= start_pos & POS <= end_pos)
pointer = start_pos
REF_seq = c()
while (pointer < end_pos) {
append(REF_seq, 1)
}
pointer = 0
REF_seq = c()
while (pointer < (end_pos - start_pos)) {
at_indel = indels_find_interval[pointer]
append(REF_seq, at_indel$REF)
pointer = pointer + nchar(indels_find_interval$REF)
}
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
pointer = 0
REF_seq = c()
interval_len = end_pos - start_pos
while (pointer < interval_len) {
at_indel = indels_find_interval[pointer]
append(REF_seq, at_indel$REF)
pointer = pointer + nchar(indels_find_interval$REF)
}
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer]
append(REF_seq, at_indel$REF)
pointer = pointer + nchar(indels_find_interval$REF)
}
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer]
append(REF_seq, at_indel$REF)
pointer = pointer + nchar(indels_find_interval$REF)
}
REF_seq = list()
interval_len = end_pos - start_pos
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer]
append(REF_seq, at_indel$REF)
pointer = pointer + nchar(indels_find_interval$REF)
}
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer]
#append(REF_seq, at_indel$REF)
pointer = pointer + nchar(indels_find_interval$REF)
}
pointer = 0
REF_seq = list()
interval_len = end_pos - start_pos
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer]
append(REF_seq, at_indel$REF)
pointer = pointer + nchar(indels_find_interval$REF)
}
at_indel = indels_find_interval[pointer]
View(at_indel)
indels_find_interval
View(at_indel)
View(indels)
View(indels_find_interval)
at_indel = indels_find_interval[pointer,]
at_indel = indels_find_interval[0,]
at_indel = indels_find_interval[pointer,]
at_indel = indels_find_interval[,pointer]
at_indel = indels_find_interval[pointer,]
pointer = 1
source("~/Desktop/Code/20220930_view_IGM_indel_REF_seq_to_create_indels_figure_for_rAF_example_using_CDKN1C.R")
pointer = as.numeric(pointer) + nchar(indels_find_interval$REF)
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer,]
append(REF_seq, at_indel$REF)
pointer = pointer + at_indel$REF
}
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer,]
append(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
nchar(at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
## Read in files
## sAF, rAF and groupID info for IGM indels
indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
indels$varID = paste0(indels$CHR, sep="-", indels$POS, sep="-", indels$REF,sep="-",indels$ALT)
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= start_pos & POS <= end_pos)
pointer = 1
REF_seq = list()
interval_len = end_pos - start_pos
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer,]
append(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
REF_seq
REF_seq
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
REF_seq
REF_seq = ""
interval_len = end_pos - start_pos
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
REF_seq
REF_seq = paste0(REF_seq, at_indel$REF)
interval_len = end_pos - start_pos
while (pointer <= interval_len) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
REF_seq
while (pointer < interval_len + 1) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
## Read in files
## sAF, rAF and groupID info for IGM indels
indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
indels$varID = paste0(indels$CHR, sep="-", indels$POS, sep="-", indels$REF,sep="-",indels$ALT)
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= start_pos & POS <= end_pos)
pointer = 1
REF_seq = ""
interval_len = end_pos - start_pos
while (pointer < interval_len + 1) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
REF_seq
nchar(REF_seq)
while (pointer <= interval_len + 1) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
nchar(REF_seq)
while (pointer <= interval_len ) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
nchar(REF_seq)
## Read in files
## sAF, rAF and groupID info for IGM indels
indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
indels$varID = paste0(indels$CHR, sep="-", indels$POS, sep="-", indels$REF,sep="-",indels$ALT)
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= start_pos & POS <= end_pos)
pointer = 1
REF_seq = ""
interval_len = end_pos - start_pos
while (pointer <= interval_len ) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
nchar(REF_seq)
nrow(indels_find_interval)
## Read in files
## sAF, rAF and groupID info for IGM indels
indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
indels$varID = paste0(indels$CHR, sep="-", indels$POS, sep="-", indels$REF,sep="-",indels$ALT)
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= start_pos & POS <= end_pos)
pointer = 1
REF_seq = ""
interval_len = end_pos - start_pos
while (nchar(REF_seq) <  interval_len) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
nchar(REF_seq)
REF_seq = paste0(REF_seq,",", at_indel$REF)
## Read in files
## sAF, rAF and groupID info for IGM indels
indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
indels$varID = paste0(indels$CHR, sep="-", indels$POS, sep="-", indels$REF,sep="-",indels$ALT)
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= start_pos & POS <= end_pos)
pointer = 1
REF_seq = ""
interval_len = end_pos - start_pos
while (nchar(REF_seq) <  interval_len) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq,",", at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
nchar(REF_seq)
## split by ,
REF_seq_deliminated = REF_seq.split(",")
## split by ,
sapply(strsplit(REF_seq, ""), paste, collapse=",")
## Read in files
## sAF, rAF and groupID info for IGM indels
indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
indels$varID = paste0(indels$CHR, sep="-", indels$POS, sep="-", indels$REF,sep="-",indels$ALT)
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= start_pos & POS <= end_pos)
pointer = 1
REF_seq = ""
interval_len = end_pos - start_pos
while (nchar(REF_seq) <  interval_len) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
nchar(REF_seq)
## split by ,
sapply(strsplit(REF_seq, ""), paste, collapse=",")
## split by ,
REF_seq_deliminated = sapply(strsplit(REF_seq, ""), paste, collapse=",")
REF_seq_deliminated
## split by ,
REF_seq_deliminated = sapply(strsplit(REF_seq, ""), paste, collapse="/t")
REF_seq_deliminated
## Read in files
## sAF, rAF and groupID info for IGM indels
indels = fread( file = '/Users/sandyyang/Desktop/Data/20220909_IGM_srAF_sorted.csv', sep = ',', header = TRUE)
indels$varID = paste0(indels$CHR, sep="-", indels$POS, sep="-", indels$REF,sep="-",indels$ALT)
## Find the REF between POS 2906070 and 2906090 on CHR 11
start_pos = 2906070
end_pos = 2906090
indels_find_interval = indels %>% filter(CHR == 11) %>% filter(POS >= start_pos & POS <= end_pos)
pointer = 1
REF_seq = ""
interval_len = end_pos - start_pos
while (nchar(REF_seq) <  interval_len) {
at_indel = indels_find_interval[pointer,]
REF_seq = paste0(REF_seq, at_indel$REF)
pointer = pointer + nchar(at_indel$REF)
}
nchar(REF_seq)
## split by ,
REF_seq_deliminated = sapply(strsplit(REF_seq, ""), paste, collapse="/t")
## split by ,
REF_seq_deliminated = sapply(strsplit(REF_seq, ""), paste, collapse=",")
REF_seq_deliminated
